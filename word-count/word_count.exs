defmodule Words do
  defp count_word(word, map) do
    # Map.update(generated_map, keyword, default_value, shorthand_function(existing_value + 1))
    # get the generated_map, find the keyword
    # if found + 1, else add word to map with default_value
    Map.update(map, word, 1, &(&1 + 1))
  end

  @doc """
  Count the number of words in the sentence.

  Words are compared case-insensitively.
  """
  @spec count(String.t()) :: map
  def count(sentence) do
    sentence
    |> String.downcase()
    # String.split will check characters not ([^]) alphanumeric (:alnum:) and also not dash
    # cant use \w since it include underscore (_)
    |> String.split(~r/[^[:alnum:]-]/u, trim: true)
    # Enum.reduce will iterate through the enums (generated by String.split)
    # and invoke the function passed (count_word/2)
    # Enum.reduce will always pass 2 value: each enum value & accumulator (empty map = %{})
    |> Enum.reduce(%{}, &count_word/2)
  end
end
